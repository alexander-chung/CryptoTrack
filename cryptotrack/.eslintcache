[{"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\index.js":"1","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\App.js":"2","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\Coin.js":"3","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\MainPage.js":"4","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CoinDetailPage.js":"5","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CoinChart.js":"6","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CoinDetails.js":"7","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\api\\coinGecko.js":"8","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\NavBar.js":"9","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CurrencyConverter.js":"10","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CurrencyRow.js":"11","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\Portfolio.js":"12","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\UserContext.js":"13"},{"size":540,"mtime":1611519258908,"results":"14","hashOfConfig":"15"},{"size":965,"mtime":1611692598277,"results":"16","hashOfConfig":"15"},{"size":1935,"mtime":1610863069549,"results":"17","hashOfConfig":"15"},{"size":8320,"mtime":1611694889907,"results":"18","hashOfConfig":"15"},{"size":2301,"mtime":1610742812951,"results":"19","hashOfConfig":"15"},{"size":3939,"mtime":1611179078406,"results":"20","hashOfConfig":"15"},{"size":6312,"mtime":1611947802116,"results":"21","hashOfConfig":"15"},{"size":110,"mtime":1609701702031,"results":"22","hashOfConfig":"15"},{"size":5297,"mtime":1611947650449,"results":"23","hashOfConfig":"15"},{"size":1423,"mtime":1611186990725,"results":"24","hashOfConfig":"15"},{"size":572,"mtime":1611034823274,"results":"25","hashOfConfig":"15"},{"size":4797,"mtime":1611694375225,"results":"26","hashOfConfig":"15"},{"size":87,"mtime":1611688890453,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1h0ueqs",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"30"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"30"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\index.js",[],["60","61"],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\App.js",[],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\Coin.js",[],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\MainPage.js",["62","63","64","65","66","67","68"],"import React, {useState, useEffect, useContext} from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport NavBar from './NavBar';\r\nimport Coin from './Coin';\r\nimport coinGecko from '../api/coinGecko';\r\n\r\nimport './MainPage.css';\r\nimport './Coin.css'\r\n\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\n\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport NavigateBeforeIcon from '@material-ui/icons/NavigateBefore';\r\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\r\n\r\nexport default function MainPage({}) {\r\n  const [coins, setCoins] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [pageNumber, setPageNumber] = useState(1);\r\n  const [sortRankAscending, setSortRankAscending] = useState(true);\r\n  const [sortNameAscending, setSortNameAscending] = useState(true);\r\n  const [sortPriceAscending, setSortPriceAscending] = useState(true);\r\n  const [sortHourAscending, setSortHourAscending] = useState(true);\r\n  const [sortDayAscending, setSortDayAscending] = useState(true);\r\n  const [sortWeekAscending, setSortWeekAscending] = useState(true);\r\n  const [sortVolumeAscending, setSortVolumeAscending] = useState(true);\r\n  const [sortMarketCapAscending, setSortMarketCapAscending] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const [ mainData, searchData ] = await Promise.all([\r\n        coinGecko.get(`/coins/markets`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            order: 'market_cap_desc',\r\n            per_page: 50,\r\n            page: pageNumber,\r\n            sparkline: true,\r\n            price_change_percentage: '1h,24h,7d'\r\n          }\r\n        }),\r\n        coinGecko.get(`/coins/list`)]);\r\n      setCoins(mainData.data)\r\n      setLoading(false)\r\n    }\r\n    fetchData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true);\r\n      const res = await coinGecko.get(`/coins/markets`, {\r\n        params: {\r\n          vs_currency: 'usd',\r\n          order: 'market_cap_desc',\r\n          per_page: 50,\r\n          page: pageNumber,\r\n          sparkline: true,\r\n          price_change_percentage: '1h,24h,7d'\r\n        }\r\n      });\r\n      setCoins(res.data)\r\n      setLoading(false)\r\n    }\r\n    fetchData()\r\n\r\n  }, [pageNumber])\r\n\r\n  const sortByRank = (e) => {\r\n    let updateCoins;\r\n    if(sortRankAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.market_cap_rank > b.market_cap_rank) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.market_cap_rank > b.market_cap_rank) ? 1 : -1);\r\n    }\r\n    setSortRankAscending(!sortRankAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByName = (e) => {\r\n    let updateCoins;\r\n    if(sortNameAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.name.toLowerCase() > b.name.toLowerCase()) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.name.toLowerCase() > b.name.toLowerCase()) ? 1 : -1);\r\n    }\r\n    setSortNameAscending(!sortNameAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByPrice = (e) => {\r\n    let updateCoins;\r\n    if(sortPriceAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.current_price > b.current_price) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.current_price > b.current_price) ? 1 : -1);\r\n    }\r\n    setSortPriceAscending(!sortPriceAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByHour = (e) => {\r\n    let updateCoins;\r\n    if(sortHourAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.price_change_percentage_1h_in_currency > b.price_change_percentage_1h_in_currency) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.price_change_percentage_1h_in_currency > b.price_change_percentage_1h_in_currency) ? 1 : -1);\r\n    }\r\n    setSortHourAscending(!sortHourAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByDay = (e) => {\r\n    let updateCoins;\r\n    if(sortDayAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.price_change_percentage_24h_in_currency > b.price_change_percentage_24h_in_currency) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.price_change_percentage_24h_in_currency > b.price_change_percentage_24h_in_currency) ? 1 : -1);\r\n    }\r\n    setSortDayAscending(!sortDayAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByWeek = (e) => {\r\n    let updateCoins;\r\n    if(sortWeekAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.price_change_percentage_7d_in_currency > b.price_change_percentage_7d_in_currency) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.price_change_percentage_7d_in_currency > b.price_change_percentage_7d_in_currency) ? 1 : -1);\r\n    }\r\n    setSortWeekAscending(!sortWeekAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByVolume = (e) => {\r\n    let updateCoins;\r\n    if(sortVolumeAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.total_volume > b.total_volume) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.total_volume > b.total_volume) ? 1 : -1);\r\n    }\r\n    setSortVolumeAscending(!sortVolumeAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const sortByMarketCap = (e) => {\r\n    let updateCoins;\r\n    if(sortMarketCapAscending) {\r\n      updateCoins = coins.sort((a,b) => (a.market_cap > b.market_cap) ? -1 : 1);\r\n    }else{\r\n      updateCoins = coins.sort((a,b) => (a.market_cap > b.market_cap) ? 1 : -1);\r\n    }\r\n    setSortMarketCapAscending(!sortMarketCapAscending)\r\n    setCoins([...updateCoins])\r\n  }\r\n\r\n  const history = useHistory();\r\n\r\n  const { user, isAuthenticated } = useAuth0();\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      <div className='coin-app'>\r\n        <div className='pagination-button'>\r\n          <ButtonGroup color=\"primary\" aria-label=\"outlined primary button group\">\r\n            <Button disabled={pageNumber=== 1 ? true : false} onClick={() => setPageNumber(pageNumber - 1)}><NavigateBeforeIcon/></Button>\r\n            <Button onClick={() => setPageNumber(pageNumber + 1)}><NavigateNextIcon/></Button>\r\n          </ButtonGroup>\r\n        </div>\r\n        <div className='coin-list'>\r\n          <div className='coin-list-header' >\r\n            <div className='coin-row'>\r\n              <div className='coin'>\r\n                <span className='coin-market-cap-rank' onClick={sortByRank} style={{cursor: 'pointer' }}>#</span>\r\n                <h1 className='coin-name' onClick={sortByName} style={{cursor: 'pointer' }}>Coin</h1>\r\n              </div>\r\n              <div className='coin-data' style={{justifyContent: 'normal'}}>\r\n                <span className='coin-price' onClick={sortByPrice} style={{cursor: 'pointer' }}>Price</span>\r\n                <span className='coin-percent' onClick={sortByHour} style={{cursor: 'pointer' }}>1h</span>\r\n                <span className='coin-percent' onClick={sortByDay} style={{cursor: 'pointer' }}>24h</span>\r\n                <span className='coin-percent' onClick={sortByWeek} style={{cursor: 'pointer' }}>7d</span>\r\n                <span className='coin-volume' onClick={sortByVolume} style={{cursor: 'pointer' }}>24h Volume</span>\r\n                <span className='coin-market-cap' style={{transform: 'translate(10px, 0px)', cursor: 'pointer'}} onClick={sortByMarketCap} >Mkt Cap</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {loading ? \r\n            <CircularProgress className='loading-bar' color=\"secondary\" />\r\n          : coins.map((coin) => (\r\n            <Coin\r\n              key={coin.id}\r\n              coinId={coin.id}\r\n              coinName={coin.name}\r\n              coinImage={coin.image}\r\n              coinSymbol={coin.symbol}\r\n              coinPrice={coin.current_price}\r\n              coinVolume={coin.total_volume}\r\n              pricechange1h={coin.price_change_percentage_1h_in_currency}\r\n              priceChange24h={coin.price_change_percentage_24h_in_currency}\r\n              pricechange7d={coin.price_change_percentage_7d_in_currency}\r\n              marketCap={coin.market_cap}\r\n              marketCapRank={coin.market_cap_rank}\r\n            />\r\n          ))\r\n          }\r\n        </div>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CoinDetailPage.js",["69"],"import React, {useState, useEffect} from 'react'\r\nimport {useParams} from 'react-router-dom';\r\nimport CoinChart from './CoinChart';\r\nimport CoinDetails from './CoinDetails';\r\nimport coinGecko from '../api/coinGecko';\r\nimport NavBar from './NavBar';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\n\r\n\r\nexport default function CoinDetailPage() {\r\n  const { id } = useParams()\r\n  const [coinData, setCoinData] = useState({})\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  \r\n  const formatData = data => {\r\n    return data.map(price => {\r\n      return {\r\n        t: price[0],\r\n        y: price[1].toFixed(7)\r\n      }\r\n    })\r\n  }\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      setLoading(true)\r\n      const [ history1d, history7d, history30d, historyYear, details ] = await Promise.all([\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            days: '1'\r\n          }\r\n        }),\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            days: '7'\r\n          }\r\n        }),\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            days: '30'\r\n          }\r\n        }),\r\n        coinGecko.get(`/coins/${id}/market_chart/`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            days: '365'\r\n          }\r\n        }),\r\n        coinGecko.get(`/coins/markets/`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            ids: id,\r\n            price_change_percentage: '1h,24h,7d'\r\n          }\r\n        })\r\n      ]);\r\n    setCoinData({\r\n      day: formatData(history1d.data.prices), \r\n      week: formatData(history7d.data.prices), \r\n      month: formatData(history30d.data.prices),\r\n      year: formatData(historyYear.data.prices),\r\n      details: details.data[0]\r\n    })\r\n    setLoading(false)\r\n    }\r\n    fetchData()\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <NavBar />\r\n      {loading ? \r\n        <CircularProgress className='loading-bar' color=\"secondary\" />\r\n      :\r\n        <div>\r\n          <CoinDetails details={coinData.details}/>\r\n          <CoinChart id={id} coinData={coinData}/>  \r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CoinChart.js",["70"],"import React, {useState, useEffect} from 'react'\r\nimport {Line} from '@reactchartjs/react-chart.js'\r\nimport './CoinChart.css';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport { Chart } from 'react-chartjs-2';\r\n\r\n\r\nexport default function CoinChart({id, coinData}) {\r\n  const {day, week, month, year, details} = coinData\r\n  const [timeFormat, setTimeFormat] = useState('day')\r\n\r\n  const numberWithCommas = (x) => {\r\n    return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n  }\r\n\r\n  const formatTime = () => {\r\n    switch (timeFormat) {\r\n      case 'day':\r\n        return day\r\n      case 'week':\r\n        return week\r\n      case 'month':\r\n        return month\r\n      case 'year':\r\n        return year\r\n      default:\r\n        return day\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    Chart.pluginService.register({\r\n      afterDraw: function(chart, easing) {\r\n        if (chart.tooltip._active && chart.tooltip._active.length) {\r\n          const activePoint = chart.controller.tooltip._active[0];\r\n          const ctx = chart.ctx;\r\n          const x = activePoint.tooltipPosition().x;\r\n          const topY = chart.scales['y-axis-0'].top;\r\n          const bottomY = chart.scales['y-axis-0'].bottom;\r\n          ctx.save();\r\n          ctx.beginPath();\r\n          ctx.moveTo(x, topY);\r\n          ctx.lineTo(x, bottomY);\r\n          ctx.lineWidth = 1;\r\n          ctx.strokeStyle = \"#808080\";\r\n          ctx.setLineDash([5])\r\n          ctx.stroke();\r\n          ctx.restore();\r\n        }\r\n      }\r\n    });\r\n  }, [])\r\n\r\n  const data = {\r\n    datasets: [\r\n      {\r\n        label: '$',\r\n        data: formatTime(),\r\n        backgroundColor: \"rgb(64,150,233, 0.1)\",\r\n        borderColor: 'rgb(80,150,255)',\r\n        borderWidth: 1.5,\r\n        pointRadius: 0,\r\n        // pointHitRadius: 0\r\n      },\r\n    ]\r\n  }\r\n  \r\n  const options = {\r\n    // title: {\r\n    //   display: false,\r\n    //   text: `${id.charAt(0).toUpperCase() + id.slice(1)} Chart`,\r\n    //   fontColor: 'black',\r\n    //   fontSize: 18,\r\n    // },\r\n    tooltips: {\r\n      mode: 'index',\r\n      intersect: false,\r\n      callbacks: {\r\n        label: (tooltipItem, data) =>  {\r\n          return \"Price: \" + numberWithCommas(tooltipItem.yLabel.toFixed(2));\r\n        },\r\n      }\r\n   },\r\n\r\n   hover: {\r\n      mode: 'index',\r\n      intersect: true,\r\n   },\r\n    legend: {\r\n      display: false\r\n    },\r\n    animation: {\r\n      display: true,\r\n      duration: 500\r\n    },\r\n    maintainAspectRatio: false,\r\n    responsive: true,\r\n    scales: {\r\n      xAxes: [{\r\n          type: \"time\",\r\n          time: {\r\n            tooltipFormat:'MM/DD/YYYY HH:mm',\r\n          },\r\n          distribution: \"linear\",\r\n          gridLines: {\r\n            display: false,\r\n          },\r\n          ticks: {\r\n            beginAtZero: true,\r\n            fontColor: \"black\",\r\n          },\r\n        },\r\n      ],\r\n      yAxes: [{\r\n          ticks: {\r\n            fontColor: \"black\",\r\n          },\r\n          gridLines: {\r\n            color: \"black\",\r\n            lineWidth: 0.25\r\n          }\r\n        }\r\n      ]\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='coin-chart'>\r\n      <ButtonGroup color=\"primary\" aria-label=\"primary button group\" className='history-buttons'>\r\n          <Button className={timeFormat === \"day\" ? 'active-button' : 'regular-button'} onClick={() => setTimeFormat('day')}>1d</Button>\r\n          <Button className={timeFormat === \"week\" ? 'active-button' : 'regular-button'} onClick={() => setTimeFormat('week')}>7d</Button>\r\n          <Button className={timeFormat === \"month\" ? 'active-button' : 'regular-button'} onClick={() => setTimeFormat('month')}>30d</Button>\r\n          <Button className={timeFormat === \"year\" ? 'active-button' : 'regular-button'} onClick={() => setTimeFormat('year')}>1Y</Button>\r\n      </ButtonGroup>\r\n      <Line \r\n          data={data}\r\n          options={options}\r\n          />\r\n    </div>\r\n  )\r\n}\r\n","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CoinDetails.js",["71","72","73","74","75"],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\api\\coinGecko.js",[],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\NavBar.js",["76","77"],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CurrencyConverter.js",["78"],"import React, {useState, useEffect} from 'react'\r\nimport CurrencyRow from './CurrencyRow'\r\nimport SyncAltIcon from '@material-ui/icons/SyncAlt';\r\n\r\nconst CurrencyConverter = ({ details }) => {\r\n  const [exchangeRate, setExchangeRate] = useState(1)\r\n  const [amount, setAmount] = useState(1)\r\n  const [amountInFromCurrency, setAmountInFromCurrency] = useState(true)\r\n\r\n  let toAmount, fromAmount;\r\n  if (amountInFromCurrency) {\r\n    fromAmount = amount\r\n    toAmount = amount * exchangeRate\r\n  } else {\r\n    toAmount = amount\r\n    fromAmount = amount / exchangeRate\r\n  }\r\n\r\n  useEffect(() => {\r\n    setExchangeRate(details.current_price)\r\n  }, [])\r\n\r\n  const handleFromAmountChange = (e) => {\r\n    setAmount(e.target.value)\r\n    setAmountInFromCurrency(true)\r\n  }\r\n\r\n  const handleToAmountChange = (e) => {\r\n    setAmount(e.target.value)\r\n    setAmountInFromCurrency(false)\r\n  }\r\n\r\n  return (\r\n    <div style={{display: 'flex', flexDirection: 'row', height: '65px', alignItems:'center'}}>\r\n      <CurrencyRow \r\n        currencyText={details.symbol.toUpperCase()}\r\n        amount={fromAmount}\r\n        onChangeAmount={handleFromAmountChange}\r\n      />\r\n      <div style={{marginLeft: '5px', marginRight: '5px'}}><SyncAltIcon/></div> \r\n      <CurrencyRow\r\n        currencyText={'USD'}\r\n        amount={toAmount}\r\n        onChangeAmount={handleToAmountChange}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CurrencyConverter\r\n","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\CurrencyRow.js",[],"C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\components\\Portfolio.js",["79","80","81"],"import React, {useState, useEffect, useContext} from 'react'\r\nimport NavBar from './NavBar';\r\nimport { useAuth0 } from '@auth0/auth0-react';\r\nimport coinGecko from '../api/coinGecko';\r\nimport Coin from './Coin';\r\nimport { UserContext } from \"../UserContext\";\r\n\r\nimport './MainPage.css';\r\nimport './Portfolio.css';\r\n\r\nconst Portfolio = () => {\r\n  const { userCoins, setUserCoins } = useContext(UserContext);\r\n\r\n  const { user, isAuthenticated } = useAuth0();\r\n  const [userData, setUserData] = useState({\"id\": -1, \"auth0_id\": \"\", \"coins\": \"\"});\r\n  const [coins, setCoins] = useState([])\r\n\r\n  useEffect(() => {\r\n    if(isAuthenticated) {\r\n      const fetchUser = async () => {\r\n        const response = await fetch(`http://localhost:5000/getUserData/${user.sub}`, {\r\n          method: 'GET',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n        })\r\n        const data = await response.json();\r\n        return data;\r\n      }\r\n\r\n      const addUser = async () => {\r\n        const response = await fetch(`http://localhost:5000/addNewUser`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\"id\": null, \"auth0_id\": user.sub, \"coins\": \"\"})\r\n        })\r\n        const data = await response.json();\r\n        return data\r\n      }\r\n      fetchUser()\r\n      .then(data => {\r\n        console.log(data[0])\r\n        if(data.length === 0){\r\n          console.log(\"yep new user alert\")\r\n          addUser()\r\n          .then(setUserData({\"id\": null, \"auth0_id\": user.sub, \"coins\": \"\"})\r\n            .then(setUserCoins([])))\r\n        }else {\r\n          setUserData(data[0])\r\n          if(data[0].coins === \"\"){\r\n            setUserCoins([])\r\n          }else{\r\n            setUserCoins(data[0].coins.split(\",\"))\r\n          }\r\n        }\r\n      })\r\n\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    console.log(\"userData: \", userData.coins)\r\n    if(userData.coins === \"\") {\r\n      return\r\n    }\r\n    if(isAuthenticated) {\r\n      const fetchData = async () => {\r\n        const response = await coinGecko.get(`/coins/markets`, {\r\n          params: {\r\n            vs_currency: 'usd',\r\n            ids: userData.coins,\r\n            order: 'market_cap_desc',\r\n            per_page: 50,\r\n            sparkline: true,\r\n            price_change_percentage: '1h,24h,7d'\r\n          }\r\n        });\r\n        setCoins(response.data)\r\n      }\r\n      if(userData.coins === \"\"){\r\n        console.log(\"no coins\")\r\n      } else {\r\n        fetchData()\r\n      }\r\n    }\r\n  }, [userData])\r\n\r\n  useEffect(() => {\r\n    console.log(\"coins: \", coins)\r\n  }, [coins])\r\n\r\n  return (\r\n    <>\r\n      <NavBar />\r\n      {isAuthenticated ? \r\n        <div className='coin-list' style={{display:'flex', flexDirection: 'column', alignItems: 'center'}}>\r\n          <div className='coin-list-header' >\r\n            <div className='coin-row'>\r\n              <div className='coin'>\r\n                <span className='coin-market-cap-rank' style={{cursor: 'pointer' }}>#</span>\r\n                <h1 className='coin-name' style={{cursor: 'pointer' }}>Coin</h1>\r\n              </div>\r\n              <div className='coin-data' style={{justifyContent: 'normal'}}>\r\n                <span className='coin-price' style={{cursor: 'pointer' }}>Price</span>\r\n                <span className='coin-percent' style={{cursor: 'pointer' }}>1h</span>\r\n                <span className='coin-percent' style={{cursor: 'pointer' }}>24h</span>\r\n                <span className='coin-percent' style={{cursor: 'pointer' }}>7d</span>\r\n                <span className='coin-volume' style={{cursor: 'pointer' }}>24h Volume</span>\r\n                <span className='coin-market-cap' style={{transform: 'translate(10px, 0px)', cursor: 'pointer'}}>Mkt Cap</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          {coins.map((coin) => (\r\n            <Coin\r\n                key={coin.id}\r\n                coinId={coin.id}\r\n                coinName={coin.name}\r\n                coinImage={coin.image}\r\n                coinSymbol={coin.symbol}\r\n                coinPrice={coin.current_price}\r\n                coinVolume={coin.total_volume}\r\n                pricechange1h={coin.price_change_percentage_1h_in_currency}\r\n                priceChange24h={coin.price_change_percentage_24h_in_currency}\r\n                pricechange7d={coin.price_change_percentage_7d_in_currency}\r\n                marketCap={coin.market_cap}\r\n                marketCapRank={coin.market_cap_rank}\r\n              />\r\n          ))}\r\n        </div> \r\n        :<div className='center' style={{fontSize: '16px', fontWeight: 'bold'}}>\r\n          Please sign in to create, edit, or view your portfolio\r\n        </div>\r\n      }\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Portfolio\r\n","C:\\Users\\Alexander\\Desktop\\Personal Projects\\CryptoTrack\\cryptotrack\\src\\UserContext.js",[],{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","replacedBy":"85"},{"ruleId":"86","severity":1,"message":"87","line":1,"column":37,"nodeType":"88","messageId":"89","endLine":1,"endColumn":47},{"ruleId":"90","severity":1,"message":"91","line":18,"column":34,"nodeType":"92","messageId":"93","endLine":18,"endColumn":36},{"ruleId":"86","severity":1,"message":"94","line":34,"column":25,"nodeType":"88","messageId":"89","endLine":34,"endColumn":35},{"ruleId":"95","severity":1,"message":"96","line":50,"column":6,"nodeType":"97","endLine":50,"endColumn":8,"suggestions":"98"},{"ruleId":"86","severity":1,"message":"99","line":160,"column":9,"nodeType":"88","messageId":"89","endLine":160,"endColumn":16},{"ruleId":"86","severity":1,"message":"100","line":162,"column":11,"nodeType":"88","messageId":"89","endLine":162,"endColumn":15},{"ruleId":"86","severity":1,"message":"101","line":162,"column":17,"nodeType":"88","messageId":"89","endLine":162,"endColumn":32},{"ruleId":"95","severity":1,"message":"102","line":72,"column":6,"nodeType":"97","endLine":72,"endColumn":8,"suggestions":"103"},{"ruleId":"86","severity":1,"message":"104","line":10,"column":34,"nodeType":"88","messageId":"89","endLine":10,"endColumn":41},{"ruleId":"86","severity":1,"message":"105","line":1,"column":49,"nodeType":"88","messageId":"89","endLine":1,"endColumn":55},{"ruleId":"95","severity":1,"message":"106","line":59,"column":6,"nodeType":"97","endLine":59,"endColumn":8,"suggestions":"107"},{"ruleId":"95","severity":1,"message":"108","line":74,"column":6,"nodeType":"97","endLine":74,"endColumn":17,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":125,"column":15,"nodeType":"112","endLine":125,"endColumn":119},{"ruleId":"113","severity":1,"message":"114","line":129,"column":117,"nodeType":"115","endLine":129,"endColumn":132},{"ruleId":"86","severity":1,"message":"116","line":18,"column":11,"nodeType":"88","messageId":"89","endLine":18,"endColumn":20},{"ruleId":"95","severity":1,"message":"106","line":69,"column":6,"nodeType":"97","endLine":69,"endColumn":8,"suggestions":"117"},{"ruleId":"95","severity":1,"message":"118","line":21,"column":6,"nodeType":"97","endLine":21,"endColumn":8,"suggestions":"119"},{"ruleId":"86","severity":1,"message":"116","line":12,"column":11,"nodeType":"88","messageId":"89","endLine":12,"endColumn":20},{"ruleId":"95","severity":1,"message":"106","line":61,"column":6,"nodeType":"97","endLine":61,"endColumn":8,"suggestions":"120"},{"ruleId":"95","severity":1,"message":"121","line":88,"column":6,"nodeType":"97","endLine":88,"endColumn":16,"suggestions":"122"},"no-native-reassign",["123"],"no-negated-in-lhs",["124"],"no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","unexpected","'searchData' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'pageNumber'. Either include it or remove the dependency array.","ArrayExpression",["125"],"'history' is assigned a value but never used.","'user' is assigned a value but never used.","'isAuthenticated' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["126"],"'details' is assigned a value but never used.","'useRef' is defined but never used.","React Hook useEffect has missing dependencies: 'isAuthenticated', 'setUserCoins', and 'user.sub'. Either include them or remove the dependency array.",["127"],"React Hook useEffect has a missing dependency: 'userData.id'. Either include it or remove the dependency array.",["128"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'userCoins' is assigned a value but never used.",["129"],"React Hook useEffect has a missing dependency: 'details.current_price'. Either include it or remove the dependency array. If 'setExchangeRate' needs the current value of 'details.current_price', you can also switch to useReducer instead of useState and read 'details.current_price' in the reducer.",["130"],["131"],"React Hook useEffect has a missing dependency: 'isAuthenticated'. Either include it or remove the dependency array.",["132"],"no-global-assign","no-unsafe-negation",{"desc":"133","fix":"134"},{"desc":"135","fix":"136"},{"desc":"137","fix":"138"},{"desc":"139","fix":"140"},{"desc":"137","fix":"141"},{"desc":"142","fix":"143"},{"desc":"137","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [pageNumber]",{"range":"147","text":"148"},"Update the dependencies array to be: [id]",{"range":"149","text":"150"},"Update the dependencies array to be: [isAuthenticated, setUserCoins, user.sub]",{"range":"151","text":"152"},"Update the dependencies array to be: [userCoins, userData.id]",{"range":"153","text":"154"},{"range":"155","text":"152"},"Update the dependencies array to be: [details.current_price]",{"range":"156","text":"157"},{"range":"158","text":"152"},"Update the dependencies array to be: [isAuthenticated, userData]",{"range":"159","text":"160"},[1948,1950],"[pageNumber]",[1985,1987],"[id]",[1903,1905],"[isAuthenticated, setUserCoins, user.sub]",[2350,2361],"[userCoins, userData.id]",[2246,2248],[643,645],"[details.current_price]",[1879,1881],[2567,2577],"[isAuthenticated, userData]"]